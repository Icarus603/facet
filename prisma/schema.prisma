// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// Core User Management
model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  profile             Json?
  culturalBackground  Json?    @map("cultural_background")
  privacySettings     Json?    @map("privacy_settings")
  subscriptionTier    String   @default("free") @map("subscription_tier")

  // Relations
  culturalProfiles    UserCulturalProfile[]
  emergencyContacts   EmergencyContact[]
  therapySessions     TherapySession[]
  progressAssessments ProgressAssessment[]
  sessionOutcomes     SessionOutcome[]
  progressTrends      ProgressTrend[]
  crisisAssessments   CrisisAssessment[]
  crisisInterventions CrisisIntervention[]
  safetyPlans         SafetyPlan[]
  culturalContentUsage CulturalContentUsage[]
  agentSessions       AgentSession[]
  websocketSessions   WebsocketSession[]
  auditLogs           AuditLog[]
  memoryContexts      MemoryContext[]
  memoryAccessLogs    MemoryAccessLog[]

  @@map("users")
}

model UserCulturalProfile {
  id                        String   @id @default(cuid())
  userId                    String   @map("user_id")
  primaryCulture           String?  @map("primary_culture")
  secondaryCultures        String[] @map("secondary_cultures")
  languagePreferences      String[] @map("language_preferences")
  religiousSpiritualBackground String? @map("religious_spiritual_background")
  generationalStatus       String?  @map("generational_status")
  culturalValues          Json?    @map("cultural_values")
  createdAt               DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_cultural_profiles")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  contactType  String   @map("contact_type")
  name         String
  phone        String?
  email        String?
  relationship String?
  priority     Int      @default(1)
  consentGiven Boolean  @default(false) @map("consent_given")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

// Therapy Session Management
model TherapySession {
  id                        String   @id @default(cuid())
  userId                    String   @map("user_id")
  sessionType              String   @map("session_type")
  primaryConcern           String?  @map("primary_concern")
  culturalContext          Json?    @map("cultural_context")
  sessionGoals             String[] @map("session_goals")
  status                   String   @default("active")
  startedAt                DateTime @default(now()) @map("started_at")
  endedAt                  DateTime? @map("ended_at")
  durationMinutes          Int?     @map("duration_minutes")
  satisfactionRating       Int?     @map("satisfaction_rating")
  culturalRelevanceRating  Int?     @map("cultural_relevance_rating")
  crisisDetected           Boolean  @default(false) @map("crisis_detected")
  agentCoordinationSummary Json?    @map("agent_coordination_summary")

  // Relations
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  therapyInteractions TherapyInteraction[]
  agentSessions       AgentSession[]
  sessionOutcomes     SessionOutcome[]
  messageDeliveryLog  MessageDeliveryLog[]
  crisisAssessments   CrisisAssessment[]
  culturalContentUsage CulturalContentUsage[]
  agentCoordinationLog AgentCoordinationLog[]
  systemMetrics       SystemMetric[]
  memoryContext       MemoryContext?
  sessionTransitions  SessionTransition[]
  sessionMetrics      SessionMetrics[]
  sessionEvents       SessionEvent[]

  @@map("therapy_sessions")
}

model TherapyInteraction {
  id                  String   @id @default(cuid())
  sessionId          String   @map("session_id")
  interactionType    String   @map("interaction_type")
  agentType          String?  @map("agent_type")
  userInput          String?  @map("user_input")
  agentResponse      String?  @map("agent_response")
  culturalContentUsed Json?   @map("cultural_content_used")
  emotionalAnalysis  Json?    @map("emotional_analysis")
  processingTimeMs   Int?     @map("processing_time_ms")
  coordinationEvents Json?    @map("coordination_events")
  timestamp          DateTime @default(now())

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("therapy_interactions")
}

model AgentSession {
  id                   String   @id @default(cuid())
  therapySessionId     String   @map("therapy_session_id")
  userId               String   @map("user_id")
  agentType           String   @map("agent_type")
  agentRole           String?  @map("agent_role")
  sessionContext      Json?    @map("session_context")
  performanceMetrics  Json?    @map("performance_metrics")
  culturalAdaptations Json?    @map("cultural_adaptations")
  status              String   @default("active")
  startedAt           DateTime @default(now()) @map("started_at")
  endedAt             DateTime? @map("ended_at")

  // Relations
  therapySession TherapySession @relation(fields: [therapySessionId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id])

  @@map("agent_sessions")
}

model AgentCoordinationLog {
  id                 String   @id @default(cuid())
  sessionId         String   @map("session_id")
  coordinationEvent String   @map("coordination_event")
  agentsInvolved    String[] @map("agents_involved")
  timingData        Json?    @map("timing_data")
  success           Boolean
  timestamp         DateTime @default(now())

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id])

  @@map("agent_coordination_log")
}

// Cultural Content & Wisdom
model CulturalContent {
  id                      String   @id @default(cuid())
  contentType            String   @map("content_type")
  cultureTags            String[] @map("culture_tags")
  title                  String
  content                String
  source                 String?
  author                 String?
  historicalPeriod       String?  @map("historical_period")
  therapeuticThemes      String[] @map("therapeutic_themes")
  therapeuticApplications String[] @map("therapeutic_applications")
  targetIssues           String[] @map("target_issues")
  embedding              Unsupported("vector(1536)")?
  metadata               Json?
  expertValidated        Boolean  @default(false) @map("expert_validated")
  expertValidator        String?  @map("expert_validator")
  biasScore              Decimal? @map("bias_score") @db.Decimal(3, 2)
  usageCount             Int      @default(0) @map("usage_count")
  effectivenessRating    Decimal? @map("effectiveness_rating") @db.Decimal(3, 2)
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  usage        CulturalContentUsage[]
  validations  CulturalContentValidation[]

  @@map("cultural_content")
}

model CulturalContentUsage {
  id                      String   @id @default(cuid())
  contentId              String   @map("content_id")
  sessionId              String   @map("session_id")
  userId                 String   @map("user_id")
  agentType              String?  @map("agent_type")
  usageContext           String?  @map("usage_context")
  userResponseRating     Int?     @map("user_response_rating")
  culturalResonanceRating Int?    @map("cultural_resonance_rating")
  therapeuticEffectiveness Int?   @map("therapeutic_effectiveness")
  usedAt                 DateTime @default(now()) @map("used_at")

  // Relations
  content CulturalContent @relation(fields: [contentId], references: [id])
  session TherapySession  @relation(fields: [sessionId], references: [id])
  user    User            @relation(fields: [userId], references: [id])

  @@map("cultural_content_usage")
}

model CulturalContentValidation {
  id                     String   @id @default(cuid())
  contentId             String   @map("content_id")
  validatorType         String   @map("validator_type")
  validatorId           String?  @map("validator_id")
  validationResult      String   @map("validation_result")
  culturalAccuracyScore Decimal? @map("cultural_accuracy_score") @db.Decimal(3, 2)
  biasIndicators        Json?    @map("bias_indicators")
  recommendedChanges    String?  @map("recommended_changes")
  validationNotes       String?  @map("validation_notes")
  validatedAt           DateTime @default(now()) @map("validated_at")

  // Relations
  content CulturalContent @relation(fields: [contentId], references: [id])

  @@map("cultural_content_validation")
}

// Crisis Detection & Safety
model CrisisAssessment {
  id                      String   @id @default(cuid())
  userId                  String   @map("user_id")
  sessionId              String?  @map("session_id")
  assessmentTrigger      String   @map("assessment_trigger")
  riskLevel              String   @map("risk_level")
  riskScore              Decimal  @map("risk_score") @db.Decimal(3, 2)
  riskFactors            Json?    @map("risk_factors")
  assessmentDetails      Json?    @map("assessment_details")
  confidenceScore        Decimal? @map("confidence_score") @db.Decimal(3, 2)
  interventionRecommended Boolean @default(false) @map("intervention_recommended")
  interventionTaken      Json?    @map("intervention_taken")
  humanValidationRequired Boolean @default(false) @map("human_validation_required")
  resolvedAt             DateTime? @map("resolved_at")
  followUpScheduled      DateTime? @map("follow_up_scheduled")
  assessedAt             DateTime @default(now()) @map("assessed_at")

  // Relations
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  session      TherapySession?      @relation(fields: [sessionId], references: [id])
  interventions CrisisIntervention[]

  @@map("crisis_assessments")
}

model CrisisIntervention {
  id                        String   @id @default(cuid())
  assessmentId             String   @map("assessment_id")
  userId                   String   @map("user_id")
  interventionType         String   @map("intervention_type")
  interventionDetails      Json?    @map("intervention_details")
  contactsNotified         Json?    @map("contacts_notified")
  emergencyServicesContacted Boolean @default(false) @map("emergency_services_contacted")
  interventionSuccessful   Boolean? @map("intervention_successful")
  followUpActions          Json?    @map("follow_up_actions")
  initiatedAt              DateTime @default(now()) @map("initiated_at")
  completedAt              DateTime? @map("completed_at")

  // Relations
  assessment CrisisAssessment @relation(fields: [assessmentId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@map("crisis_interventions")
}

model SafetyPlan {
  id                      String   @id @default(cuid())
  userId                  String   @map("user_id")
  crisisTriggers         String[] @map("crisis_triggers")
  warningSigns           String[] @map("warning_signs")
  copingStrategies       Json?    @map("coping_strategies")
  culturalCopingMechanisms Json?  @map("cultural_coping_mechanisms")
  emergencyContacts      Json?    @map("emergency_contacts")
  professionalResources  Json?    @map("professional_resources")
  safetyEnvironment      Json?    @map("safety_environment")
  planEffective          Boolean? @map("plan_effective")
  lastReviewed           DateTime? @map("last_reviewed")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("safety_plans")
}

// Progress Tracking & Analytics
model ProgressAssessment {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  assessmentType          String   @map("assessment_type")
  scores                  Json?
  baselineScores          Json?    @map("baseline_scores")
  improvementPercentage   Decimal? @map("improvement_percentage") @db.Decimal(5, 2)
  culturalIntegrationScore Decimal? @map("cultural_integration_score") @db.Decimal(3, 2)
  therapeuticAllianceRating Int?   @map("therapeutic_alliance_rating")
  completionRate          Decimal? @map("completion_rate") @db.Decimal(3, 2)
  insights                Json?
  recommendations         String[] 
  completedAt             DateTime @default(now()) @map("completed_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_assessments")
}

model SessionOutcome {
  id                      String   @id @default(cuid())
  sessionId              String   @map("session_id")
  userId                 String   @map("user_id")
  moodBefore             Int?     @map("mood_before")
  moodAfter              Int?     @map("mood_after")
  anxietyLevelBefore     Int?     @map("anxiety_level_before")
  anxietyLevelAfter      Int?     @map("anxiety_level_after")
  culturalConnectionRating Int?   @map("cultural_connection_rating")
  insightsGained         String[] @map("insights_gained")
  actionItems            String[] @map("action_items")
  culturalContentHelpful Boolean? @map("cultural_content_helpful")
  agentPerformanceRating Int?     @map("agent_performance_rating")
  overallSessionRating   Int?     @map("overall_session_rating")
  outcomeNotes           String?  @map("outcome_notes")
  recordedAt             DateTime @default(now()) @map("recorded_at")

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id])

  @@map("session_outcomes")
}

model ProgressTrend {
  id                      String   @id @default(cuid())
  userId                  String   @map("user_id")
  metricType             String   @map("metric_type")
  trendPeriod            String   @map("trend_period")
  trendDirection         String   @map("trend_direction")
  trendStrength          Decimal  @map("trend_strength") @db.Decimal(3, 2)
  culturalFactorsInfluence Json?  @map("cultural_factors_influence")
  seasonalPatterns       Json?    @map("seasonal_patterns")
  interventionCorrelations Json?  @map("intervention_correlations")
  calculatedAt           DateTime @default(now()) @map("calculated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_trends")
}

// System Administration & Monitoring
model AuditLog {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  sessionId     String?  @map("session_id")
  actionType    String   @map("action_type")
  resourceType  String?  @map("resource_type")
  resourceId    String?  @map("resource_id")
  actionDetails Json?    @map("action_details")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  success       Boolean  @default(true)
  errorDetails  Json?    @map("error_details")
  timestamp     DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemMetric {
  id                String   @id @default(cuid())
  metricType       String   @map("metric_type")
  metricValue      Decimal  @map("metric_value") @db.Decimal(10, 3)
  metricUnit       String?  @map("metric_unit")
  component        String?
  sessionId        String?  @map("session_id")
  additionalContext Json?   @map("additional_context")
  recordedAt        DateTime @default(now()) @map("recorded_at")

  // Relations
  session TherapySession? @relation(fields: [sessionId], references: [id])

  @@map("system_metrics")
}

model AgentPerformanceMetric {
  id                      String   @id @default(cuid())
  agentType              String   @map("agent_type")
  sessionCount           Int      @map("session_count")
  averageResponseTimeMs  Int      @map("average_response_time_ms")
  successRate            Decimal  @map("success_rate") @db.Decimal(3, 2)
  userSatisfactionAvg    Decimal? @map("user_satisfaction_avg") @db.Decimal(3, 2)
  culturalAccuracyAvg    Decimal? @map("cultural_accuracy_avg") @db.Decimal(3, 2)
  crisisDetectionAccuracy Decimal? @map("crisis_detection_accuracy") @db.Decimal(3, 2)
  coordinationEfficiency Decimal? @map("coordination_efficiency") @db.Decimal(3, 2)
  costPerInteraction     Decimal? @map("cost_per_interaction") @db.Decimal(10, 4)
  datePeriod             DateTime @map("date_period") @db.Date
  calculatedAt           DateTime @default(now()) @map("calculated_at")

  @@map("agent_performance_metrics")
}

// Real-time Communication
model WebsocketSession {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  connectionId     String   @unique @map("connection_id")
  encryptionKeyHash String? @map("encryption_key_hash")
  connectedAt      DateTime @default(now()) @map("connected_at")
  lastHeartbeat    DateTime @default(now()) @map("last_heartbeat")
  sessionMetadata  Json?    @map("session_metadata")

  // Relations
  user               User                 @relation(fields: [userId], references: [id])
  messageDeliveryLog MessageDeliveryLog[]

  @@map("websocket_sessions")
}

model MessageDeliveryLog {
  id               String   @id @default(cuid())
  sessionId       String   @map("session_id")
  websocketSessionId String? @map("websocket_session_id")
  messageId       String   @map("message_id")
  deliveryStatus  String   @map("delivery_status")
  retryCount      Int      @default(0) @map("retry_count")
  timestamp       DateTime @default(now())

  // Relations
  session          TherapySession     @relation(fields: [sessionId], references: [id])
  websocketSession WebsocketSession? @relation(fields: [websocketSessionId], references: [id])

  @@map("message_delivery_log")
}

// Memory Management & Session Continuity
model MemoryContext {
  id              String   @id @default(cuid())
  sessionId      String   @unique @map("session_id")
  userId         String   @map("user_id")
  agentType      String   @map("agent_type")
  contextData    Json     @map("context_data")
  encryptionMeta Json?    @map("encryption_meta")
  createdAt      DateTime @default(now()) @map("created_at")
  lastAccessed   DateTime @default(now()) @map("last_accessed")
  accessCount    Int      @default(0) @map("access_count")

  // Relations
  user    User           @relation(fields: [userId], references: [id])
  session TherapySession @relation(fields: [sessionId], references: [id])

  @@map("memory_contexts")
}

model MemoryAccessLog {
  id           String    @id @default(cuid())
  sessionId   String    @map("session_id")
  userId      String    @map("user_id")
  action      String
  status      String
  errorMessage String?   @map("error_message")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  timestamp   DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("memory_access_logs")
}

model ContextSharingLog {
  id          String   @id @default(cuid())
  sessionId  String   @map("session_id")
  fromAgent  String   @map("from_agent")
  toAgent    String   @map("to_agent")
  contextType String  @map("context_type")
  dataSize   Int?     @map("data_size")
  success    Boolean  @default(true)
  timestamp  DateTime @default(now())

  @@map("context_sharing_logs")
}

model SessionTransition {
  id          String   @id @default(cuid())
  sessionId  String   @map("session_id")
  fromAgent  String   @map("from_agent")
  toAgent    String   @map("to_agent")
  reason     String
  contextData Json?   @map("context_data")
  success    Boolean  @default(true)
  timestamp  DateTime @default(now())

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id])

  @@map("session_transitions")
}

model SessionMetrics {
  id                   String   @id @default(cuid())
  sessionId           String   @map("session_id")
  durationSeconds     Int      @map("duration_seconds")
  messageCount        Int      @map("message_count")
  agentSwitches       Int      @map("agent_switches")
  therapeuticAlliance Decimal  @map("therapeutic_alliance") @db.Decimal(3, 2)
  progressScore       Decimal  @map("progress_score") @db.Decimal(3, 2)
  crisisEvents        Int      @map("crisis_events")
  culturalRelevance   Decimal? @map("cultural_relevance") @db.Decimal(3, 2)
  userSatisfaction    Decimal? @map("user_satisfaction") @db.Decimal(3, 2)
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id])

  @@map("session_metrics")
}

model SessionEvent {
  id        String   @id @default(cuid())
  sessionId String   @map("session_id")
  eventType String   @map("event_type")
  eventData Json?    @map("event_data")
  severity  String?  @default("info")
  timestamp DateTime @default(now())

  // Relations
  session TherapySession @relation(fields: [sessionId], references: [id])

  @@map("session_events")
}